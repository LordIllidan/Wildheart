import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';

interface ReportHistory {
  id: string;
  name: string;
  type: string;
  generatedBy: string;
  generatedAt: Date;
  status: 'completed' | 'failed' | 'in_progress';
  fileSize?: string;
  downloadUrl?: string;
}

@Component({
  selector: 'app-report-history',
  template: `
    <div class="history-container">
      <div class="header">
        <h2>Report History</h2>
        <div class="filters">
          <select [(ngModel)]="selectedType" (change)="filterReports()">
            <option value="">All Types</option>
            <option *ngFor="let type of reportTypes" [value]="type">
              {{type}}
            </option>
          </select>
          <select [(ngModel)]="selectedStatus" (change)="filterReports()">
            <option value="">All Status</option>
            <option value="completed">Completed</option>
            <option value="failed">Failed</option>
            <option value="in_progress">In Progress</option>
          </select>
          <input 
            type="date" 
            [(ngModel)]="dateFilter" 
            (change)="filterReports()"
            placeholder="Filter by date">
        </div>
      </div>

      <div class="reports-table">
        <table>
          <thead>
            <tr>
              <th>Report Name</th>
              <th>Type</th>
              <th>Generated By</th>
              <th>Date</th>
              <th>Status</th>
              <th>Size</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <tr *ngFor="let report of filteredReports">
              <td>{{report.name}}</td>
              <td>{{report.type}}</td>
              <td>{{report.generatedBy}}</td>
              <td>{{report.generatedAt | date:'medium'}}</td>
              <td>
                <span class="status-badge" [ngClass]="report.status">
                  {{report.status}}
                </span>
              </td>
              <td>{{report.fileSize || '-'}}</td>
              <td class="actions">
                <button 
                  *ngIf="report.status === 'completed'"
                  class="action-btn download"
                  (click)="downloadReport(report)">
                  Download
                </button>
                <button 
                  class="action-btn delete"
                  (click)="deleteReport(report)">
                  Delete
                </button>
              </td>
            </tr>
          </tbody>
        </table>

        <div class="empty-state" *ngIf="filteredReports.length === 0">
          <p>No reports found matching the current filters.</p>
        </div>
      </div>

      <div class="pagination">
        <button 
          [disabled]="currentPage === 1"
          (click)="changePage(currentPage - 1)">
          Previous
        </button>
        <span>Page {{currentPage}} of {{totalPages}}</span>
        <button 
          [disabled]="currentPage === totalPages"
          (click)="changePage(currentPage + 1)">
          Next
        </button>
      </div>
    </div>
  `,
  styles: [`
    .history-container {
      padding: 20px;
      max-width: 1200px;
      margin: 0 auto;
    }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    .filters {
      display: flex;
      gap: 10px;
    }
    .filters select, .filters input {
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    .reports-table {
      background: white;
      border-radius: 4px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      overflow-x: auto;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #eee;
    }
    th {
      background-color: #f8fafc;
      font-weight: 600;
    }
    .status-badge {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.8em;
      text-transform: capitalize;
    }
    .status-badge.completed {
      background-color: #C6F6D5;
      color: #2F855A;
    }
    .status-badge.failed {
      background-color: #FED7D7;
      color: #C53030;
    }
    .status-badge.in_progress {
      background-color: #FEFCBF;
      color: #975A16;
    }
    .actions {
      display: flex;
      gap: 5px;
    }
    .action-btn {
      padding: 4px 8px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.8em;
    }
    .action-btn.download {
      background-color: #EBF8FF;
      color: #2B6CB0;
    }
    .action-btn.delete {
      background-color: #FED7D7;
      color: #C53030;
    }
    .empty-state {
      text-align: center;
      padding: 40px;
      color: #666;
    }
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 20px;
      margin-top: 20px;
    }
    .pagination button {
      padding: 8px 16px;
      border: 1px solid #ddd;
      border-radius: 4px;
      background: white;
      cursor: pointer;
    }
    .pagination button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
  `],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    RouterModule
  ]
})
export class ReportHistoryComponent implements OnInit {
  reports: ReportHistory[] = [];
  filteredReports: ReportHistory[] = [];
  reportTypes: string[] = ['System', 'Project', 'Audit', 'Performance'];
  selectedType = '';
  selectedStatus = '';
  dateFilter: string | null = null;
  currentPage = 1;
  totalPages = 1;
  itemsPerPage = 10;

  constructor() {
    // Initialize with sample data
    this.reports = [
      {
        id: '1',
        name: 'Monthly System Status',
        type: 'System',
        generatedBy: 'Admin User',
        generatedAt: new Date('2023-04-15'),
        status: 'completed',
        fileSize: '2.5 MB',
        downloadUrl: '/reports/1'
      },
      {
        id: '2',
        name: 'Project Progress Summary',
        type: 'Project',
        generatedBy: 'Project Manager',
        generatedAt: new Date('2023-04-10'),
        status: 'completed',
        fileSize: '1.8 MB',
        downloadUrl: '/reports/2'
      },
      {
        id: '3',
        name: 'User Activity Log',
        type: 'Audit',
        generatedBy: 'Security Admin',
        generatedAt: new Date('2023-04-05'),
        status: 'failed'
      },
      {
        id: '4',
        name: 'Performance Metrics',
        type: 'Performance',
        generatedBy: 'DevOps Team',
        generatedAt: new Date('2023-04-01'),
        status: 'in_progress'
      }
    ];
    this.filteredReports = [...this.reports];
  }

  ngOnInit(): void {
    // TODO: Load reports from service
    this.calculatePagination();
  }

  filterReports(): void {
    let filtered = [...this.reports];

    if (this.selectedType) {
      filtered = filtered.filter(report => report.type === this.selectedType);
    }

    if (this.selectedStatus) {
      filtered = filtered.filter(report => report.status === this.selectedStatus);
    }

    if (this.dateFilter) {
      const filterDate = new Date(this.dateFilter);
      filtered = filtered.filter(report => {
        const reportDate = new Date(report.generatedAt);
        return reportDate.toDateString() === filterDate.toDateString();
      });
    }

    this.filteredReports = filtered;
    this.currentPage = 1;
    this.calculatePagination();
  }

  calculatePagination(): void {
    this.totalPages = Math.ceil(this.filteredReports.length / this.itemsPerPage);
  }

  changePage(page: number): void {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
    }
  }

  downloadReport(report: ReportHistory): void {
    // TODO: Implement report download
    console.log('Download report:', report);
  }

  deleteReport(report: ReportHistory): void {
    // TODO: Implement report deletion
    console.log('Delete report:', report);
  }
} 